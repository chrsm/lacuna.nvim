import "http.request" as request
import "cjson" as json

import "telescope.actions" as tsactions
import "telescope.actions.state" as tsactionstate
import "telescope.finders" as tsfinder
import "telescope.pickers" as tspicker
import "telescope.pickers.entry_display" as tsedisp
import "telescope.previewers" as tspreview
import "telescope.config" as tsconf

import "lacuna.archive" as larchive

defcfg =
  docset_url: "https://api.zealdocs.org/v1/docsets"
  docset_redir_url: "https://go.zealdocs.org/d/<SOURCE>/<NAME>/latest"
  download_timeout: 30

  docset_path: vim.fn.expand "~/doctest"

  known:
    ["Lua_5.2"]:
      parser: "lacuna.parser.lua"
      expand: "Lua.docset/Contents/Resources"
    ["Lua_5.3"]:
      parser: "lacuna.parser.lua"
      expand: "Lua.docset/Contents/Resources"
    ["Lua_5.4"]:
      parser: "lacuna.parser.lua"
      expand: "Lua.docset/Contents/Resources"

  sets: {}

menu = (results) ->
  p = tspicker.new {}, {
    prompt_title: "entries"
    title: (entry) ->
      "title test"
    finder: tsfinder.new_table {
      :results
      entry_maker: (v) ->
        {
          value: v.content
          ordinal: v.name
          display: v.name
          id: v
        }
      title: (entry) ->
        "title test"
    }
    previewer: tspreview.new_buffer_previewer {
      define_preview: (entry, status) =>
        vim.api.nvim_buf_set_lines @state.bufnr, 0, -1, true, entry.value
        vim.api.nvim_win_set_option status.preview_win, 'wrap', true
    }
    sorter: tsconf.values.generic_sorter {}
    attach_mappings: (bufnr, map) ->
      tsactions.select_default\replace ->
        tsactions.close bufnr

        -- dunno what's useful to actually do here..
        -- we definitely don't want to just paste shit into the buffer.
        -- perhaps it'd be nice to open the content into an actual split?
        -- sel = tsactionstate.get_selected_entry!

      true
  }
  
  p\find!

lacuna = {}

lacuna.download_docset = (name) ->
  unless lacuna.config
    error "lacuna: no config provided; call lacuna.setup!"

  req = with request.new_from_uri lacuna.config.docset_url
    .headers\upsert "User-Agent", "curl/7.80.0"
    .headers\append "X-Req-By", "lacuna.nvim"
    .headers\append "Accept", "application/json"

  h, r = req\go lacuna.config.download_timeout
  unless h
    error "lacuna: no headers from #{ lacuna.config.docset_url }"

  b = r\get_body_as_string!
  unless b
    error "lacuna: no body from #{ lacuna.config.docset_url }"

  data = json.decode b
  downloaded = false
  dst = nil
  for v in *data
    source, sname = v.sourceId, v.name

    unless sname == name
      continue

    url = (lacuna.config.docset_redir_url\gsub "<SOURCE>", source)\gsub "<NAME>", sname
    req = with request.new_from_uri url
      .headers\append "user-agent", "curl/7.80.0"
      .headers\append "x-xeq-by", "lacuna.nvim"

    head, stream = req\go lacuna.config.download_timeout
    unless head
      return "lacuna: failed to fetch #{ url }"

    dst = "/tmp/lacuna-#{ sname }.dash"
    fp, err = io.open dst, "w+"
    if err
      error "lacuna: failed to open #{ dst }: #{ err }"

    s = stream\get_body_as_string!
    -- stream\save_body_to_file doesn't write the last 1kb? :think:
    -- look into that maybe file a bug

    fp\write s
    fp\close!
    s = nil

    downloaded = true
    break

  unless downloaded
    return "lacuna: #{ name } not found"

  -- unpack
  arc = larchive dst, "#{ lacuna.config.docset_path }/#{ name }"
  arc\unpack!
  
  -- TODO: should just make this a notification, but dunno if there's an API.
  print "lacuna: #{ name } downloaded and unpacked!"
  "lacuna: #{ name } downloaded as #{ dst }, unpacked to #{ lacuna.config.docset_path }/#{ name }"

lacuna.find = (docset, query) ->
  unless lacuna.config
    error "lacuna: no config provided; call lacuna.setup!"

  unless lacuna.config.sets[docset]
    error "lacuna: docset not downloaded yet, run lacuna.download_docset \"#{ docset }\""

  known = if lacuna.config.known[docset]
    lacuna.config.known[docset]
  else
    error "lacuna: no parser found for #{ docset }"

  -- allow any valid parser to be used; just implement `run_query` and `get`
  luap = require known.parser
  p = luap "#{ lacuna.config.docset_path }/#{ docset }/#{ known.expand }/docSet.dsidx"

  entries = p\run_query query
  error "no rows in set" unless #entries > 0

  results = {}
  for v in *entries
    vp = "#{ lacuna.config.docset_path }/#{ docset }/#{ known.expand }/Documents/#{ v.loc }"
    r = p\get vp, v
    unless #r == 0
      results[] = v for v in *r

  menu results

lacuna.setup = (opt = {}) ->
  lacuna.config = vim.tbl_deep_extend "force", defcfg, opt

  -- discover current sets
  for f in lfs.dir lacuna.config.docset_path
    continue if f == "." or f == ".."

    attr = lfs.attributes "#{ lacuna.config.docset_path }/#{ f }"
    continue unless attr.mode == "directory"

    lacuna.config.sets[f] = true

  nil

export default lacuna
